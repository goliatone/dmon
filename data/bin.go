// Code generated by go-bindata.
// sources:
// bin/check
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _binCheck = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xef\x6f\xda\x30\x10\xfd\x9e\xbf\xe2\x9a\x32\xa9\x48\x23\x69\x3b\x4d\x93\x32\xb1\x2d\x6a\x51\x17\xc1\x4c\x15\x52\xf1\x61\x9a\x90\x49\x0e\x62\x11\x6c\x66\x3b\x6d\xa5\xaa\xff\xfb\x2e\x09\x04\xfa\x63\x5b\x3f\xe0\xc4\x77\xef\x5e\xde\xbd\x3b\x8e\x8f\xfc\xb9\x90\xfe\x9c\x9b\xdc\x71\x8e\x21\x2c\x6d\xae\x74\x00\x03\x2d\x56\x30\xd4\xc2\x58\x94\x06\x25\x65\x06\x6b\x2e\x8a\x00\x90\x12\xdf\xaa\x63\xd5\x26\xbd\x54\xad\x09\x30\x12\x69\x75\x0d\xe0\x47\x94\xd0\x95\xf1\xa5\x50\x06\x6e\x0c\x5f\x52\x2c\xcd\x31\x5d\xcd\xa4\xde\xe0\x51\xf3\x9a\xa9\x74\x85\x7a\x96\x2a\x69\xb9\x90\xa8\x8f\xf6\xaf\x33\x91\xcd\x88\x60\x5b\xe9\xf9\xaf\x17\x78\x26\x87\xe7\x35\x54\x95\xe4\x08\x26\xd5\x62\x63\x9b\x6f\x1a\x10\x0b\xe0\xd0\x02\x41\x18\xd0\xa5\x94\x42\x2e\x3d\x82\x03\x8c\x87\xd0\xdb\x45\xea\xc0\x34\x8c\x59\xc4\xae\x28\xfa\xa4\x68\x99\x2b\xea\x37\xab\x21\x17\x71\x94\x44\x17\xe1\xe8\x39\xc6\x58\xb5\xd9\x6c\x31\x37\x6c\xc8\xc6\x53\x46\x90\x4c\xa1\x01\xa9\x2c\xe0\x3d\x59\x56\xab\x5c\xf3\x15\xd2\x15\xd3\xd2\xf2\x79\x81\x70\x27\xc8\xf6\xd2\x82\x29\x33\x15\x50\xbe\x7a\x92\x7e\x75\x27\x41\x2b\x65\x83\xea\x00\xbf\x34\xda\x2f\x54\xca\x8b\x7a\x64\x39\xf2\xc2\xe6\x7b\xf0\x5a\x65\xf0\xe9\xf4\xf4\xdf\xb0\x5b\x51\x3d\xe8\x56\x90\x66\x38\xff\x18\xc0\xbb\x3a\x1e\x8e\x46\xfd\x13\x3a\x02\xfa\x75\xab\x1b\x41\xca\x79\x29\x6d\xd9\xa6\xba\xc0\xc6\xd7\xe1\x64\x32\xbd\x0c\xfe\xf2\x8d\x8b\x31\x4b\xc2\x88\x0d\xe2\x7e\xe7\xcc\x71\xe2\x1b\x56\xf9\xd8\xef\x9c\x34\xa3\x03\x21\xcd\x06\x53\x0b\xbd\xde\x42\xe9\x35\xb7\x7d\xf7\xe1\x01\xbc\x89\xe5\x16\xbd\xb8\x19\x00\x3c\x3e\xba\xd0\x69\x79\xe0\xfc\x0b\xf8\x19\xde\xfa\xb2\x2c\x8a\xae\xe3\xd0\x28\x7f\x42\xe7\x2b\xf4\xf0\x37\x9c\xc1\xaf\xcf\x60\x73\xda\x4d\x00\x24\xab\xc0\xdd\x3b\x7e\xc0\xf0\xd4\x7c\xcf\xad\xd0\xf7\xc2\xc2\x07\x67\x21\xb6\x84\x6e\x67\x2b\xd5\x85\x7e\x1f\xdc\x05\x2f\x0c\xba\x2f\xd8\x0f\x66\x7e\x40\x2f\x1a\xf2\xdd\x46\xb5\xf4\xe7\x35\xfd\xd5\xf7\xf1\x24\x79\x9b\x01\x57\xd5\x7a\x3d\x6b\xbf\xdb\x0a\xac\x89\x1a\x79\x56\x97\xaf\xa8\xdb\x2f\xed\x81\xb8\x9c\x1b\x98\x23\xca\xdd\xee\xee\xe5\x9d\xd5\xf2\x26\x49\x18\x27\x83\xcb\xb7\x09\xa4\x53\x13\x47\xf8\x52\x24\x1b\x24\xd3\x71\x3c\xfc\x1f\x0d\x43\x7b\xa7\xf4\x6a\x82\xd6\x92\x55\xc6\x8b\xae\xc3\x2c\xd3\x68\xcc\xcb\xae\x9b\x9e\xea\x7f\xe6\x53\xaf\x77\x3e\x43\x74\x1d\x40\x67\xfb\xe1\xf7\xd0\x6a\xa3\xe0\xb6\x29\xd7\xf9\x13\x00\x00\xff\xff\x10\x8d\xa3\x4b\xda\x04\x00\x00")

func binCheckBytes() ([]byte, error) {
	return bindataRead(
		_binCheck,
		"bin/check",
	)
}

func binCheck() (*asset, error) {
	bytes, err := binCheckBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/check", size: 1242, mode: os.FileMode(509), modTime: time.Unix(1448158957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bin/check": binCheck,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bin": &bintree{nil, map[string]*bintree{
		"check": &bintree{binCheck, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
